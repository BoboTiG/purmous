#!/bin/perl -w
#
# $Author: BoboTiG <bobotig@gmail.com> (http://www.bobotig.fr)$
# $Id: purmous$
# $Revision: 0$, $HeadURL: http://purmous.sourceforge.net/$, $Date: 2010/03/19$
# $Revision: 0$, $Source: http://purmous.sourceforge.net/$, $Date: 2010/03/19$
#
#
#  Purge Mounted System
#  --------------------
#  Try 'purmous -i' for more informations or read README.
#
# Under GNU GPL license v3 or higher.
#


use strict;


# === [ Variables ] ====================================================
my $VERSION = '0.9';	# Tool version
my $nb_files = 0;			# Number of deleted files
my $weight = 0;			# Weight of deleted files
my @files;				# Array which contains all files which will be deleted
my $lock = 0;			# Protection against current system deletions
my $verbose = 0;		# Verbosity
my $i = 0;				# @files key
# === [ /Variables ] ===================================================


# === [ Messages ] =====================================================
my $help = "Usage : $0 OPTION [ARGUMENTS [-v]]
	
Options:
  -h,  --help		display this message
  -i,  --infos		if you want know what is purged
  -p,  --purge		launch the purgation

Examples:
  $0 -p /mnt/xp/ xp
	-> purge system mounted in /mnt/xp/ as M\$ Windows XP system
  $0 -p /mnt/xp/ xp -v
	-> idem plus verbosity

Report bugs, suggestions and comments to <bobotig\@gmail.com>.
";
my $info = "

  This tool was written to purge temporary files on a mounted system.
  It is full functional with:
    - Microsoft Windows (2000, 2003, XP, Vista, Seven)
    - GNU/Linux
    - Stockage partition
    - Another OS or missing? Do not hesitate to contact me =]

  Written by BoboTiG [ http://bobotig.fr ] <bobotig\@gmail.com>
  License: GNU GPL version 3 or higher.
  
For more details try:
  $0 -i (stock|2000|2003|xp|vista|seven|linux)
";
my $title = "
  Purge Mounted System
  --------------------";
my $legend = "
	
--[[ A missing? Do not hesitate to contact me. ]]--
";
my $stock = "

  == Stockage partition ==
  Folders and files to purge:
	. FOUND.*
	. \$RECYCLE.BIN/*
	. Recycled/*
	. .Trash-1000/*";
my $win2000 = "

  == Microsoft Windows 2000 ==
  Folders and files to purge:
	. Documents and Settings/<*>
		-> not All Users
		-> not Default User
		(...)/Local Settings/Temp/*
		(...)/Local Settings/Temporary Internet Files/*
		(...)/Recent/*
    . RECYCLER/<*>/*
	. WINNT/Temp/*
	. WINNT/\$*";
my $xp_2003 = "

  == Microsoft Windows XP/2003 ==
  Folders and files to purge:
	. Documents and Settings/<*>
		-> not All Users
		-> not Default User
		-> not LocalService
		-> not NetworkService
		(...)/Local Settings/Temp/*
		(...)/Local Settings/Temporary Internet Files/*
		(...)/Recent/*
	. RECYCLER/<*>/*
	. WINDOWS/Prefetch/*
		-> not Layout.ini
	. WINDOWS/Temp/*
	. WINDOWS/\$*";
my $vista_seven = "

  == Microsoft Windows Vista / 7even ==
  Folders and files to purge:
	. \$Recycle.Bin/<*>/*
	. Users/<*>
		-> not Public
		-> not Default
		(...)/AppData/Local/Temp/*
			-> not Low
		(...)/AppData/Local/Microsoft/Feeds Cache/*
			-> not index.dat
		(...)/AppData/Local/Microsoft/Windows/Caches/*
		(...)/AppData/Local/Microsoft/Windows/Temporary Internet Files/*
			-> not Content.IE5
			-> not Content.MSO
			-> not Content.Word
			-> not Low
			-> not Virtualized
		(...)/AppData/Roaming/Microsoft/Windows/Recent/*
			-> not AutomaticDestinations
			-> not CustomDestinations
      . RECYCLER/<*>/*
      . Windows/Prefetch/*
          -> not ReadyBoot
          -> not Layout.ini
      . Windows/Temp/*";
my $linux = "

  == GNU/Linux ==
  Folders and files to purge:
      . tmp/*
      . var/tmp/*";
my $wrong_os = "[!] Wrong OS. Try '$0 --help'.\n";
my $nothing = "O_o Nothing to do ...
[-] Try '$0 --help' for more informations.
";
my $unknown = "O_o Unknown command ...
[-] Try '$0 --help' for more informations.
";
# === [ /Messages ] ====================================================


# === [ Subs ] =========================================================
#
# (void)check_path
# Info: check path
# Params: (string) path
# Return: (string) path checked
#
sub check_path {
	my @argz = @_;
	
	if ( substr($argz[0], 0, 1) ne '/' ) {
		print '[!] Path have to be absolute (i.e. "/mnt/xp").'."\n" ;
		exit;
	}
	$argz[0] .= '/' if ( substr($argz[0], -1) ne '/' );
	print '[-] Path: '.$argz[0]."\n";
	# Local file system, Is the mounted system  writable?
	$lock = 1 if ( $argz[0] eq '/' or ! is_writable($argz[0]) );
	return $argz[0];
} #end check_path

#
# (void)is_writable
# Info: check if the mounted system is writable
# Params: (string) path
# Return: (int) 1 if writable, else 0
#
sub is_writable {
	my @argz = @_;
	my $test_file = $argz[0].'test.purmous';
	
	if ( utime(time, time, $test_file) or (open(F, ">$test_file") && close F) ) {
		unlink($test_file);
		return 1;
	}
	return 0;
} #end is_writable


#
# (void)count
# Info: count files in one folder, recursive function
# Params: none
#
sub count {
	my @argz = @_;
	
	opendir(DIR, $argz[0]);
	while ( my $f = readdir(DIR) ) {
		if ( $f ne '.' && $f ne '..' ) {
			count_file($argz[0].'/'.$f);
		}
	}
} #end count


#
# (void)count_file
# Info: store files and folders and retieves weight file
# Params: none
#
sub count_file {
	my @argz = @_;
	
	if ( -d $argz[0] || -f $argz[0] ) {
	#if ( $argz[0] ) {
		$files[$i] = $argz[0];
		++$nb_files;
		++$i;
		$weight += (stat($argz[0]))[7];
		if ( -d $argz[0] ) {
			count($argz[0]);
		}
	}
	return;
} #end count_file


#
# (void)delete_all_files
# Info: sub to ask and delete files and folders
# Params: none
#
sub delete_all_files {
	my $rep = '';
	my $not_deleted = 0;
	my $m = $#files;
	
	if ( $lock ) {
		print '[!] Alert! Purgation locked, maybe:'."\n";
		print "\t".'- mount point does no exist,'."\n";
		print "\t".'- or you are trying to purge the current file system,'."\n";
		print "\t".'- or you do not have enough rights,'."\n";
		print "\t".'- or I do not know c\'mon guy! What else?'."\n";
		print '[-] Ex(c)iting...'."\n";
	} elsif ( $nb_files > 0 ) {
		if ( $nb_files > 1 ) {
			@files = sort(@files);
			if ( $verbose ) {
				foreach my $file ( @files ) {
					print $file."\n";
				}
			}
			print "\t-> ".$nb_files.' files found '.weight()."\n";
		} else {
			print $files[0]."\n" if ( $verbose );
			print "\t-> ".'1 file found '.weight()."\n";
		}
		print "\t-> ".'Process to deletion (y/N) ? ';
		chomp($rep = <STDIN>);
		if ( $rep eq 'y' || $rep eq 'Y' ) {
			while ( $m >= 0 ) {
				if ( -f $files[$m] ) {
					if ( ! unlink($files[$m]) ) {
						++$not_deleted;
					}
				} else {
					if ( ! rmdir($files[$m]) ) {
						++$not_deleted;
					}
				}
				--$m;
			}
			if ( $not_deleted == 1 ) {
				print '[!] 1 file not deleted.'."\n";
			} elsif ( $not_deleted > 1 ) {
				print '[!] '.$not_deleted.' files not deleted.'."\n";
			}
			print '[+] System purged!'."\n";
		} else {
			print '[+] No file deleted.'."\n";
			print '[+] Arf ... System not purged!'."\n";
		}
	} else {
		print '[+] System is clean :)'."\n";
	}
	return;
} #end delete_all_files


#
# (void)Sub: files_deleted
# Info: after deletion, print information
# Params: (int) number of deleted files
#
sub files_deleted {
	my @argz = @_;
	
	if ( $argz[0] == 0 ) {
		print '[+] System clean.'."\n";
	} elsif ( $argz[0] == 1 ) {
		print '[+] 1 file deleted.'."\n";
	} else {
		print '[+] '.$argz[0].' files deleted.'."\n";
	}
	return;
} #end 


#
# (int)in_array
# Info: check if a var is in an array sub
# Params: (string)variable, (array)checked_array
# Returns: 1 if variable exists, else 0
#
sub in_array {
	my @argZ = @_;
	
	if ( defined($argZ[0]) ) {
		my $var = $argZ[0];
		shift(@argZ);
		foreach my $item ( @argZ ) {
			return 1 if ( $item eq $var );
		}
	}
	return 0;
}


#
# (void)main
# Info: main sub, arguments traitment
# Params: (array) arguments
#
sub main {
	my @argz = @_;

	# Arguments traitment
	print '>>> purmous v'.$VERSION."\n";
	if ( $argz[0] ) {
		if ( $argz[0] eq '-h' || $argz[0] eq '--help' ) {
			print $help;
		} elsif ( $argz[0] eq '-i' || $argz[0] eq '--infos' ) {
			# OS specifications
			if ( lc($argz[1]) ) {
				if ( $argz[1] eq 'stock' ) {
					print $title.$stock.$legend;
				} elsif ( $argz[1] eq '2000' ) {
					print $title.$win2000.$legend;
				} elsif ( $argz[1] eq 'xp' || $argz[1] eq '2003') {
					print $title.$xp_2003.$legend;
				} elsif ( $argz[1] eq 'vista' || $argz[1] eq 'seven' ) {
					print $title.$vista_seven.$legend;
				} elsif ( $argz[1] eq 'linux' ) {
					print $title.$linux.$legend;
				}  else {
					print $title.$info;
				}
			}  else {
				print $title.$info;
			}
		} elsif ( $argz[0] eq '-p' || $argz[0] eq '--purge' ) {
			# Check path
			$argz[1] = check_path($argz[1]);
			# Verbose?
			if ( $argz[3] && ($argz[3] eq '-v' || $argz[3] eq '--verbose') ) {
				$verbose = 1;
			}
			# OS specifications
			if ( $argz[2] ) {
				if ( $argz[2] eq 'stock' ) {
					purge_stock($argz[1]);
				} elsif ( $argz[2] eq '2000' ) {
					purge_2000($argz[1]);
				} elsif ( $argz[2] eq 'xp' || $argz[2] eq '2003' ) {
					purge_xp_2003($argz[1]);
				} elsif ( $argz[2] eq 'vista' || $argz[2] eq 'seven' ) {
					purge_vista_seven($argz[1]);
				} elsif ( $argz[2] eq 'linux' ) {
					purge_linux($argz[1]);
				} else {
					print $wrong_os;
				}
			} else {
				print $wrong_os;
			}
		} elsif ( $argz[0] eq '-u' || $argz[0] eq '--update' ) {
			update();
		} else {
			print $unknown;
		}
	} else {
		print $nothing;
	}
	return;
} #end main


#
# (void)purge_2000
# Info: Microsoft Windows 2000 purgation
# Params: (string) path
#
sub purge_2000 {
	my @argz = @_;
	my @files_to_delete;
	my @to_ignore = (
		'All Users',
		'Default User',
	);

	print '[-] OS  : Microsoft Windows 2000'."\n";
	print '[+] Scanning ...'."\n";
	# Documents and Settings/<*>
	my @users = <"$argz[0]Documents and Settings/*">;
	foreach my $user ( @users ) {
		my @user = split('/', $user);
		$user = $user[$#user];
		if ( ! in_array($user, @to_ignore) ) {
			# (...)/Local Settings/Temp/*
			@files_to_delete = <"$argz[0]Documents and Settings/$user/Local Settings/Temp/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
			# (...)/Local Settings/Temporary Internet Files/*
			@files_to_delete = <"$argz[0]Documents and Settings/$user/Local Settings/Temporary Internet Files/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
			# (...)/Recent/*
			@files_to_delete = <"$argz[0]Documents and Settings/$user/Recent/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
		}
	}
	# RECYCLER/<*>/*
	my @recyclers = <$argz[0]RECYCLER/*>;
	foreach my $recycler ( @recyclers ) {
		@files_to_delete = <$recycler/*>;
		foreach my $file ( @files_to_delete ) {
			count_file($file);
		}
	}
	# WINNT/Temp/*
	@files_to_delete = <$argz[0]WINNT/Temp/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# WINNT/$*
	@files_to_delete = <$argz[0]WINNT/\$*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# Ask for deletion
	delete_all_files();
	return;
} #end purge_2000


#
# (void)purge_linux
# Info: GNU/Linux purgation
# Params: (string) path
#
sub purge_linux {
	my @argz = @_;
	my @files_to_delete;
	
	print '[-] OS  : GNU/Linux'."\n"; 
	print '[+] Scanning ...'."\n";
	# tmp/*
	@files_to_delete = <$argz[0]tmp/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# var/tmp/*
	@files_to_delete = <$argz[0]var/tmp/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# Ask for deletion
	delete_all_files();
	return;
} #end purge_linux


#
# (void)purge_stock
# Info: Stockage partition purgation
# Params: (string) path
#
sub purge_stock {
	my @argz = @_;
	my @files_to_delete;
	
	# FOUND.*
	@files_to_delete = <$argz[0]FOUND.*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# $RECYCLE.BIN
	@files_to_delete = <$argz[0]\$RECYCLE.BIN/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# Recycled/*
	@files_to_delete = <$argz[0]Recycled/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# .Trash-1000/*
	@files_to_delete = <$argz[0].Trash-1000/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# Ask for deletion
	delete_all_files();
	return;
} #end purge_stock


#
# (void)purge_xp_2003
# Info: Microsoft Windows XP/2003 purgation
# Params: (string) path
#
sub purge_xp_2003 {
	my @argz = @_;
	my @files_to_delete;
	my @to_ignore = (
		'All Users',
		'Default User',
		'LocalService',
		'NetworkService',
	);

	print '[-] OS  : Microsoft Windows XP/2003'."\n";
	print '[+] Scanning ...'."\n";
	# Documents and Settings/<*>
	my @users = <"$argz[0]/Documents and Settings/*">;
	foreach my $user ( @users ) {
		my @user = split('/', $user);
		$user = $user[$#user];
		if ( ! in_array($user, @to_ignore) ) {
			# (...)/Local Settings/Temp/*
			@files_to_delete = <"$argz[0]Documents and Settings/$user/Local Settings/Temp/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
			# (...)/Local Settings/Temporary Internet Files/*
			@files_to_delete = <"$argz[0]Documents and Settings/$user/Local Settings/Temporary Internet Files/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
			# (...)/Recent/*
			@files_to_delete = <"$argz[0]Documents and Settings/$user/Recent/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
		}
	}
	# RECYCLER/<*>/*
	my @recyclers = <$argz[0]RECYCLER/*>;
	foreach my $recycler ( @recyclers ) {
		@files_to_delete = <$recycler/*>;
		foreach my $file ( @files_to_delete ) {
			count_file($file);
		}
	}
	# WINDOWS/Prefetch/*
	@files_to_delete = <$argz[0]WINDOWS/Prefetch/*>;
	foreach my $file ( @files_to_delete ) {
		# Not Layout.ini!
		count_file($file) if ( ! grep(/Layout.ini/, $file) );
	}
	# WINDOWS/Temp/*
	@files_to_delete = <$argz[0]WINDOWS/Temp/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# WINDOWS/$*
	@files_to_delete = <$argz[0]WINDOWS/\$*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# Ask for deletion
	delete_all_files();
	return;
} #end purge_xp_2003


#
# (void)purge_vista_seven
# Info: Microsoft Windows Vista and 7even purgation
# Params: (string) path
#
sub purge_vista_seven {
	my @argz = @_;
	my @files_to_delete;
	my @users_to_forget = (
		'All Users',
		'Default',
		'Default User',
		'desktop.ini',
		'Public',
	);
	my @to_ignore = (
		'AutomaticDestinations',
		'Content.IE5',
		'Content.MSO',
		'Content.Word',
		'CustomDestinations',
		'index.dat',
		'Low',
		'Virtualized',
	);

	print '[-] OS  : Microsoft Windows Vista / 7even'."\n";
	print '[+] Scanning ...'."\n";
	# $Recycle.Bin/<*>
	my @recyclers = <"$argz[0]\$Recycle.Bin/*>;
	foreach my $recycler ( @recyclers ) {
		@files_to_delete = <$recycler/*>;
		foreach my $file ( @files_to_delete ) {
			count_file($file);
		}
	}
	# Users/<*>
	my @users = <"$argz[0]Users/*">;
	foreach my $user ( @users ) {
		my @user = split('/', $user);
		$user = $user[$#user];
		chop($user);
		if ( ! in_array($user, @users_to_forget) ) {
			# (...)/AppData/Local/Temp/*
			@files_to_delete = <"$argz[0]Users/$user/AppData/Local/Temp/*">;
			foreach my $file ( @files_to_delete ) {
				my @filen = split('/', $file);
				my $filen = $filen[$#filen];
				count_file($file) if ( ! in_array($filen, @to_ignore) );
			}
			# (...)/AppData/Local/Microsoft/Feeds Cache/*
			@files_to_delete = <"$argz[0]Users/$user/AppData/Local/Microsoft/Feeds Cache/*">;
			foreach my $file ( @files_to_delete ) {
				my @filen = split('/', $file);
				my $filen = $filen[$#filen];
				count_file($file) if ( ! in_array($filen, @to_ignore) );
			}
			# (...)/AppData/Local/Microsoft/Windows/Caches/*
			@files_to_delete = <"$argz[0]Users/$user/AppData/Local/Microsoft/Windows/Caches/*">;
			foreach my $file ( @files_to_delete ) {
				count_file($file);
			}
			# (...)/AppData/Local/Microsoft/Windows/Temporary Internet Files/*
			@files_to_delete = <"$argz[0]Users/$user/AppData/Local/Microsoft/Windows/Temporary Internet Files/*">;
			foreach my $file ( @files_to_delete ) {
				my @filen = split('/', $file);
				my $filen = $filen[$#filen];
				count_file($file) if ( ! in_array($filen, @to_ignore) );
			}
			# (...)/AppData/Roaming/Microsoft/Windows/Recent/*
			@files_to_delete = <"$argz[0]Users/$user/AppData/Roaming/Microsoft/Windows/Recent/*">;
			foreach my $file ( @files_to_delete ) {
				my @filen = split('/', $file);
				my $filen = $filen[$#filen];
				count_file($file) if ( ! in_array($filen, @to_ignore) );
			}
		}
	}
	# RECYCLER/<*>/*
	@recyclers = <$argz[0]RECYCLER/*>;
	foreach my $recycler ( @recyclers ) {
		@files_to_delete = <$recycler/*>;
		foreach my $file ( @files_to_delete ) {
			count_file($file);
		}
	}
	# Windows/Prefetch/*
	@files_to_delete = <$argz[0]Windows/Prefetch/*>;
	foreach my $file ( @files_to_delete ) {
		# Do not delete ReadyBoot nor Layout.ini!
		if ( ! grep(/ReadyBoot/, $file) && ! grep(/Layout.ini/, $file) ) {
			count_file($file);
		}
	}
	# Windows/Temp/*
	@files_to_delete = <$argz[0]Windows/Temp/*>;
	foreach my $file ( @files_to_delete ) {
		count_file($file);
	}
	# Ask for deletion
	delete_all_files();
	return;
} #end purge_vista_seven


#
# (void)weight
# Info: print total weight of files and folders found
# Params: none
#
sub weight {
	my @argz = @_;
	
	if ( $weight > 1000000000 ) {
		return sprintf("(%0.3f Go)", ($weight / 1024 / 1024 / 1024));
	} elsif ( $weight > 1000000 ) {
		return sprintf("(%0.3f Mo)", ($weight / 1024 / 1024));
	} elsif ( $weight == 1000 ) {
		return sprintf("(%0.3f Ko)", ($weight / 1024));
	} else {
		return sprintf("(%.0f o)", $weight);
	}
} #end weight
# === [ /Subs ] ========================================================


# Let's go!
main(@ARGV);
exit;
